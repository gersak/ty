#!/usr/bin/env node
/**
 * Custom Icons Generator for TypeScript
 * Generates TypeScript icon files from local SVG directory
 * 
 * Each icon is a separate constant for perfect tree-shaking!
 * 
 * Usage: node scripts/generate-custom-icons.mjs <input-dir> <output-file> [set-name]
 */

import { makeSafeIdentifier } from './reserved-words.mjs'
import { readdirSync, readFileSync, writeFileSync, existsSync, mkdirSync } from 'fs'
import { join, basename, dirname } from 'path'

/**
 * Convert kebab-case to camelCase
 */
function toCamelCase(str) {
  return str.replace(/[-_]([a-z0-9])/g, (_, letter) => letter.toUpperCase())
}

/**
 * Convert icon name to valid TypeScript identifier
 */
function toValidIdentifier(name) {
  // Remove .svg extension
  name = name.replace(/\.svg$/, '')
  
  // Replace invalid characters
  name = name.replace(/[^a-zA-Z0-9-]/g, '-')
  
  // Remove consecutive hyphens
  name = name.replace(/-+/g, '-')
  
  // Remove leading/trailing hyphens
  name = name.replace(/^-+|-+$/g, '')
  
  // If starts with number, prefix with 'icon-'
  if (/^\d/.test(name)) {
    name = 'icon-' + name
  }
  
  const identifier = toCamelCase(name)
  
  // Make safe by avoiding JS reserved words
  return makeSafeIdentifier(identifier)
}

/**
 * Process a single SVG file
 */
function processSvg(path) {
  const svgContent = readFileSync(path, 'utf-8')
  const fileName = basename(path)
  const iconName = fileName.replace(/\.svg$/, '')
  const identifier = toValidIdentifier(iconName)
  
  // Clean SVG content (remove XML declaration, trim)
  const cleanedSvg = svgContent
    .replace(/<\?xml[^>]*\?>/g, '')
    .trim()
  
  // Escape backticks and ${} in SVG
  const escapedSvg = cleanedSvg
    .replace(/\\/g, '\\\\')  // Escape backslashes first
    .replace(/`/g, '\\`')
    .replace(/\$/g, '\\$')
  
  return {
    identifier,
    iconName,
    svg: escapedSvg
  }
}

/**
 * List all SVG files in directory
 */
function listSvgFiles(dir) {
  if (!existsSync(dir)) {
    console.error(`‚ùå Directory not found: ${dir}`)
    return []
  }

  return readdirSync(dir)
    .filter(file => file.endsWith('.svg'))
    .map(file => join(dir, file))
}

/**
 * Generate TypeScript icon file with proper tree-shaking
 * Each icon is a separate const (like ClojureScript def)
 */
function generateTypeScript(icons, setName = 'custom') {
  const exportName = toCamelCase(setName) + 'Icons'
  
  const lines = [
    '/**',
    ` * ${setName.charAt(0).toUpperCase() + setName.slice(1)} Icons - Auto-generated`,
    ' * DO NOT EDIT THIS FILE MANUALLY',
    ` * Total icons: ${icons.length}`,
    ' *',
    ' * Each icon is a separate constant for perfect tree-shaking.',
    ' * Import only what you need.',
    ' */',
    ''
  ]

  // Track used identifiers to avoid duplicates
  const usedIdentifiers = new Set()
  const skippedIcons = []

  // Generate individual icon constants (like ClojureScript defs)
  for (const icon of icons) {
    if (usedIdentifiers.has(icon.identifier)) {
      skippedIcons.push(icon.iconName)
      console.warn(`‚ö†Ô∏è  Skipping duplicate: ${icon.identifier} (${icon.iconName})`)
      continue
    }
    
    usedIdentifiers.add(icon.identifier)
    lines.push(`export const ${icon.identifier} = \`${icon.svg}\``)
  }
  
  lines.push('')
  
  // Add convenience registry object (OPTIONAL)
  lines.push('/**')
  lines.push(' * Icon registry object - OPTIONAL')
  lines.push(' * Only import this if you need all icons at once.')
  lines.push(' * For tree-shaking, import individual icons instead.')
  lines.push(' */')
  lines.push(`export const ${exportName}: Record<string, string> = {`)
  
  for (const icon of icons) {
    if (!usedIdentifiers.has(icon.identifier)) continue
    lines.push(`  '${icon.iconName}': ${icon.identifier},`)
  }
  
  lines.push('}')
  lines.push('')
  lines.push('/** Total number of icons */')
  lines.push(`export const ICON_COUNT = ${usedIdentifiers.size}`)
  lines.push('')
  lines.push('/** All icon names */')
  lines.push(`export const ICON_NAMES = Object.keys(${exportName})`)
  
  if (skippedIcons.length > 0) {
    console.log(`‚ö†Ô∏è  Skipped ${skippedIcons.length} duplicate icons`)
  }
  
  return lines.join('\n')
}

/**
 * Main generation function
 */
function generate() {
  const args = process.argv.slice(2)
  
  if (args.length < 2) {
    console.log('Usage: node scripts/generate-custom-icons.mjs <input-dir> <output-file> [set-name]')
    console.log('')
    console.log('Example:')
    console.log('  node scripts/generate-custom-icons.mjs ./my-icons ./ts/icons/my-icons.ts my')
    process.exit(1)
  }
  
  const [inputDir, outputFile, setName = 'custom'] = args
  
  console.log(`üé® Custom Icons Generator for TypeScript`)
  console.log('==========================================')
  console.log(`Input:  ${inputDir}`)
  console.log(`Output: ${outputFile}`)
  console.log(`Set:    ${setName}`)
  console.log('')
  
  // List all SVG files
  console.log('üìã Listing icons...')
  const iconPaths = listSvgFiles(inputDir)
  console.log(`‚úÖ Found ${iconPaths.length} icons`)
  
  if (iconPaths.length === 0) {
    console.error('‚ùå No SVG files found!')
    process.exit(1)
  }
  
  // Process all icons
  console.log('\n‚öôÔ∏è  Processing icons...')
  const icons = iconPaths.map(processSvg)
  console.log(`‚úÖ Processed ${icons.length} icons`)
  
  // Generate TypeScript file
  console.log('\nüìù Generating TypeScript file...')
  const tsContent = generateTypeScript(icons, setName)
  
  // Ensure output directory exists
  const outputDir = dirname(outputFile)
  if (!existsSync(outputDir)) {
    mkdirSync(outputDir, { recursive: true })
  }
  
  // Write output file
  writeFileSync(outputFile, tsContent, 'utf-8')
  console.log(`‚úÖ Generated ${outputFile}`)
  
  // Get file size
  const fileSize = (tsContent.length / 1024).toFixed(2)
  console.log(`   File size: ${fileSize} KB`)
  
  console.log('\n‚úÖ Generation complete!')
  console.log('\nüí° Tree-shaking friendly:')
  const exportNames = icons.slice(0, 3).map(i => i.identifier).join(', ')
  console.log(`   import { ${exportNames} } from '${outputFile.replace(/\.ts$/, '.js')}'`)
  console.log('   // Only imported icons will be bundled!')
}

// Run generator
try {
  generate()
} catch (error) {
  console.error('\n‚ùå Generation failed:', error)
  console.error(error.stack)
  process.exit(1)
}
