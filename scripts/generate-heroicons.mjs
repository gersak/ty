#!/usr/bin/env node
/**
 * Heroicons Generator for TypeScript
 * Generates TypeScript icon files from Heroicons repository
 * 
 * Heroicons has 4 styles:
 * - outline: 24x24 outline icons
 * - solid: 24x24 solid icons
 * - mini: 20x20 solid icons (mini)
 * - micro: 16x16 solid icons (micro)
 * 
 * Similar to: gen/ty/generate/heroicons.clj
 */

import { execSync } from 'child_process'
import { makeSafeIdentifier } from './reserved-words.mjs'
import { existsSync, mkdirSync, readdirSync, readFileSync, writeFileSync, rmSync } from 'fs'
import { join, basename } from 'path'

const ROOT = '.icons'
const REPO_URL = 'https://github.com/tailwindlabs/heroicons.git'
const REPO_PATH = join(ROOT, 'heroicons')
const OUTPUT_DIR = 'ts/icons/heroicons'

const STYLES = {
  outline: { size: '24', variant: 'outline' },
  solid: { size: '24', variant: 'solid' },
  mini: { size: '20', variant: 'solid' },
  micro: { size: '16', variant: 'solid' }
}

function ensureRoot() {
  if (!existsSync(ROOT)) {
    mkdirSync(ROOT, { recursive: true })
  }
}

function cloneRepo() {
  console.log('üì¶ Cloning Heroicons repository...')
  try {
    execSync(`git clone --depth 1 ${REPO_URL} ${REPO_PATH}`, { stdio: 'inherit' })
    console.log('‚úÖ Repository cloned')
  } catch (error) {
    console.error('‚ùå Failed to clone repository:', error.message)
    process.exit(1)
  }
}

function cleanRepo() {
  if (existsSync(REPO_PATH)) {
    console.log('üßπ Cleaning up repository...')
    rmSync(REPO_PATH, { recursive: true, force: true })
    console.log('‚úÖ Repository cleaned')
  }
}

function listIcons(style) {
  const { size, variant } = STYLES[style]
  const iconsPath = join(REPO_PATH, 'optimized', size, variant)
  
  if (!existsSync(iconsPath)) {
    console.error(`‚ùå Icons directory not found: ${iconsPath}`)
    return []
  }

  return readdirSync(iconsPath)
    .filter(file => file.endsWith('.svg'))
    .map(file => join(iconsPath, file))
}

/**
 * Convert kebab-case to camelCase
 * FIXED: Now handles ALL characters after hyphen (not just lowercase)
 */
function toCamelCase(str) {
  // Match hyphen followed by ANY character (letter, number, etc)
  return str.replace(/-(.)/g, (_, char) => char.toUpperCase())
}

/**
 * Convert icon name to valid TypeScript identifier
 * Handles: numbers, special chars, reserved words
 */
function toValidIdentifier(name) {
  // Remove .svg extension
  name = name.replace(/\.svg$/, '')
  
  // Replace invalid characters (keep only letters, numbers, hyphens)
  name = name.replace(/[^a-zA-Z0-9-]/g, '-')
  
  // Remove consecutive hyphens
  name = name.replace(/-+/g, '-')
  
  // Remove leading/trailing hyphens
  name = name.replace(/^-+|-+$/g, '')
  
  // If starts with number, prefix with 'icon-'
  if (/^\d/.test(name)) {
    name = 'icon-' + name
  }
  
  // Convert to camelCase (now works with numbers!)
  const identifier = toCamelCase(name)
  
  // Make safe by avoiding JS reserved words
  return makeSafeIdentifier(identifier)
}

function processSvg(path) {
  const svgContent = readFileSync(path, 'utf-8')
  const fileName = basename(path)
  const iconName = fileName.replace(/\.svg$/, '')
  const identifier = toValidIdentifier(iconName)
  
  const cleanedSvg = svgContent
    .replace(/<\?xml[^>]*\?>/g, '')
    .trim()
  
  const escapedSvg = cleanedSvg
    .replace(/\\/g, '\\\\')
    .replace(/`/g, '\\`')
    .replace(/\$/g, '\\$')
  
  return { identifier, iconName, svg: escapedSvg }
}

function generateTypeScript(icons, style) {
  const exportName = `heroicons${toCamelCase(style).replace(/^h/, 'H')}`
  
  const lines = [
    '/**',
    ` * Heroicons ${style.toUpperCase()} - Auto-generated`,
    ' * DO NOT EDIT THIS FILE MANUALLY',
    ' * Generated from: https://github.com/tailwindlabs/heroicons',
    ` * Style: ${style}`,
    ` * Total icons: ${icons.length}`,
    ' */',
    ''
  ]

  // Track used identifiers to avoid duplicates
  const usedIdentifiers = new Set()
  const skippedIcons = []

  // Individual constants
  for (const icon of icons) {
    if (usedIdentifiers.has(icon.identifier)) {
      skippedIcons.push(icon.iconName)
      console.warn(`‚ö†Ô∏è  Skipping duplicate: ${icon.identifier} (${icon.iconName})`)
      continue
    }
    
    usedIdentifiers.add(icon.identifier)
    lines.push(`export const ${icon.identifier} = \`${icon.svg}\``)
  }
  
  lines.push('')
  lines.push('/** Icon registry - OPTIONAL */')
  lines.push(`export const ${exportName}: Record<string, string> = {`)
  
  for (const icon of icons) {
    if (!usedIdentifiers.has(icon.identifier)) continue
    lines.push(`  '${icon.iconName}': ${icon.identifier},`)
  }
  
  lines.push('}')
  lines.push('')
  lines.push(`export const ICON_COUNT = ${usedIdentifiers.size}`)
  lines.push(`export const ICON_NAMES = Object.keys(${exportName})`)
  
  if (skippedIcons.length > 0) {
    console.log(`‚ö†Ô∏è  Skipped ${skippedIcons.length} duplicate icons`)
  }
  
  return lines.join('\n')
}

function generateStyle(style) {
  console.log(`\nüìã Processing ${style} icons...`)
  
  const iconPaths = listIcons(style)
  console.log(`‚úÖ Found ${iconPaths.length} icons`)
  
  if (iconPaths.length === 0) {
    console.warn(`‚ö†Ô∏è  No icons found for ${style}`)
    return
  }
  
  const icons = iconPaths.map(processSvg)
  const tsContent = generateTypeScript(icons, style)
  
  const outputPath = join(OUTPUT_DIR, `${style}.ts`)
  const outputDir = join(outputPath, '..')
  
  if (!existsSync(outputDir)) {
    mkdirSync(outputDir, { recursive: true })
  }
  
  writeFileSync(outputPath, tsContent, 'utf-8')
  console.log(`‚úÖ Generated ${outputPath}`)
  
  const fileSize = (tsContent.length / 1024).toFixed(2)
  console.log(`   File size: ${fileSize} KB`)
}

function generate() {
  console.log('üé® Heroicons Generator for TypeScript')
  console.log('======================================\n')
  
  ensureRoot()
  
  if (!existsSync(REPO_PATH)) {
    cloneRepo()
  } else {
    console.log('üìÅ Using existing repository')
  }
  
  // Generate all styles
  for (const style of Object.keys(STYLES)) {
    generateStyle(style)
  }
  
  cleanRepo()
  
  console.log('\n‚úÖ Generation complete!')
  console.log('\nüí° Usage:')
  console.log('   import { check, heart } from \'./ts/icons/heroicons/outline.js\'')
  console.log('   import { star } from \'./ts/icons/heroicons/solid.js\'')
}

try {
  generate()
} catch (error) {
  console.error('\n‚ùå Generation failed:', error)
  process.exit(1)
}
